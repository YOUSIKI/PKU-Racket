#lang racket

(define (out x) (if (and (list? x) (= (length x) 1)) (out (car x)) x))

(define (find-operator expr)
  (cond ((list? expr) (cond ((null? expr) '?)
                            ((eq? (car expr) '+) '+)
                            ((eq? (car expr) '*) (if (eq? (find-operator (cdr expr)) '+) '+ '*))
                            (else (find-operator (cdr expr)))))
        ((eq? expr '+) '+)
        ((eq? expr '*) '*)
        (else '?)))

(define (variable? x) (symbol? x))
(define (number? x) (and (not (symbol? x)) (not (list? x))))
(define (=number? x y) (if (and (number? x) (number? y)) (= x y) false))
(define (same-variable? v1 v2) (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (sum? x) (and (list? x) (eq? (find-operator x) '+)))
(define (product? x) (and (list? x) (eq? (find-operator x) '*)))
(define (make-sum a1 a2) (cond ((=number? a1 0) a2)
                               ((=number? a2 0) a1)
                               ((and (number? a1) (number? a2)) (+ a1 a2))
                               ((and (list? a1) (list? a2) (append a1 (list '+) a2)))
                               ((list? a1) (append a1 (list '+) (list a2)))
                               ((list? a2) (append (list a1) (list '+) a2))
                               (else (list a1 '+ a2))))
(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2)) (* m1 m2))
        (else (list m1 '* m2))))
(define (addend s) (define (inter s) (cond ((eq? (car s) '+) '()) (else (cons (car s) (inter (cdr s)))))) (out (inter s)))
(define (augend s) (define (inter s) (cond ((eq? (car s) '+) (cdr s)) (else (inter (cdr s))))) (out (inter s)))
(define (multiplier s) (define (inter s) (cond ((eq? (car s) '*) '()) (else (cons (car s) (inter (cdr s)))))) (out (inter s)))
(define (multiplicand s) (define (inter s) (cond ((eq? (car s) '*) (cdr s)) (else (inter (cdr s))))) (out (inter s)))

(define (deriv exp var)
  (cond ((number? exp ) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (addend exp) var)
                   (deriv (augend exp) var)))
        ((product? exp)
         (make-sum 
          (make-product (multiplier exp)
                        (deriv (multiplicand exp) var))
          (make-product (deriv (multiplier exp) var)
                        (multiplicand exp))))
        (else 
         (error "wrong format"))))

(define (myloop)
  (let ((a (read)))
    (if (eq? a eof)
        (void)
        (begin (display (deriv a 'x)) (newline) (myloop)))))

(myloop)